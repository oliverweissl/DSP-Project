eFlint Rules: In eFlint, interpretations are formalized as type declarations. Scenarios: Scenarios are represented by series of statements, which create transition traces based on act-types and event-types. Abstract Syntax: eFlint specifications consist of type declarations. Boolean and instance expressions are omitted but introduced later. Examples: Example specifications like the child-parent homework norm are provided. Type Redefinition: Types can be redefined for domain-specific use. Scripts: Scripts are sequences of statements and queries . They describe actions and events in scenarios. Input Files: To assess cases, use four input files: type declarations, domain-specific type redefinitions, initialization statements, and scenario statements. Facts and Configurations: Facts represent the institutional model at a moment in time, forming configurations. Derivation Clauses: Type declarations may have optional derivation clauses (Boolean expressions) that define which instances are true. Fact Types: Facts can be 'derived' or 'postulated' based on the presence of derivation clauses. Act-Types: Act-types define actions with performing and recipient actors. Actions have post-conditions that change configurations. Duty-Types: Duty-types involve duty holders and claimants with violation conditions. Transitions: Actions and events trigger transitions, changing institutional views by creating or terminating facts. Actions vs. Events: Actions and events differ; events lack performing and recipient actors. Invariants: The language supports invariants that must hold true in every reachable configuration. Violations: Invariant violations are reported to identify inconsistencies in specifications. Compliance: A trace can be action-compliant, duty-compliant, both, or neither. Scenario Assessment: Evaluate scenarios for action and duty compliance based on the initial configuration. Trace Recording: Traces record normative positions and relations, aiding in reproducing and explaining decision-making processes. Negative Boolean sengtences are are annotated using NOT(...)
A concrete example of a eFlint annotated text is as follows:
Fact person Identified by String Placeholder parent For person Placeholder child For person Fact natural - parent Identified by parent * child Fact adoptive - parent Identified by parent * child Fact legal - parent Identified by parent * child Holds when adoptive - parent ( parent , child ) || natural - parent ( parent , child ) Act ask - for - help Actor child Recipient parent Creates help - with - homework ( parent , child ) Holds when legal - parent ( parent , child ) Fact homework - due Identified by child Duty help - with - homework Holder parent Claimant child Violated when homework - due ( child ) Act help Actor parent Recipient child Terminates help - with - homework ( parent , child ) Holds when help - with - homework ( parent , child )

